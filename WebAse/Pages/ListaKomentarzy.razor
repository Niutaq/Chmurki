@page "/komentarze"
@using System.Net.Http
@using WebAse.Models
@inject HttpClient Http

<PageTitle>Komentarze</PageTitle>
<h3>Lista komentarzy</h3>

@if (isLoading)
{
    <p>Ładowanie...</p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        <h4>Błąd podczas pobierania danych</h4>
        <p>@errorMessage</p>
        <button class="btn btn-primary" @onclick="RetryLoading">Spróbuj ponownie</button>
    </div>
}
else if (komentarze == null || !komentarze.Any())
{
    <p>Brak komentarzy</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Autor</th>
                <th>Treść</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var komentarz in komentarze)
            {
                <tr>
                    <td>@komentarz.Name</td>
                    <td>@komentarz.Message</td>
                </tr>
            }
        </tbody>
    </table>
}

<a href="/dodaj-komentarz" class="btn btn-primary">Dodaj nowy komentarz</a>

@code {
    private List<KomentarzEntity> komentarze = new();
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            komentarze = await Http.GetFromJsonAsync<List<KomentarzEntity>>("https://chmuryprojapi20250406210134.azurewebsites.net/api/Komentarze") ?? new();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Błąd podczas komunikacji z serwerem: {ex.Message}";
            if (ex.Message.Contains("CORS"))
            {
                errorMessage = "Błąd CORS: Serwer API nie zezwala na żądania z tej aplikacji. Skontaktuj się z administratorem.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoading()
    {
        await LoadData();
    }
}